Models:
User: has_many_routines, has instructions through routines, has product through instructions
Routine: belongs to user, has many instructions, has many products
Instruction: (class methods to list steps) - belongs to Routine, has many products
Product - Belongs to instructions, has many user through routine_instructions

Have a user have a list of products

Tables:

User:
- t.string :username
- t.string :email address
- t.string :password_digest

Routines:
- t.string :name
- t.integer :user_id

Instructions: 
- t.integer :routine_id
- t.text :content
- t.integer :position

Products:
- t.string :name


Views
- Routines
   - new.erb
   - edit.erb
   - show.erb
   - routines.erb

- Users
   - new_user.erb
   - login.erb
   - show.erb


- A routine belongs to a user
- You can't have a product belong to an instruction unless you want a bunch of duplicate products (this is ok, confirmed with Micah)
- Make the products resuable 
- Routine belongs to user 




Each user has a routine, each routine has instructions 

Could make instruction part of the products Tables:
Routine id, product id, 

Table InstructionJoin table between Instructions and routines

Join table 
Routine ID, Instruction ID, Step in Routine 
Validate uniqueness of instruction



User Interface
- Want to allow user to sign up/login ('/signup', '/login')
- Create user in DB and Model
- Want to allow user to create new routine / persist routine to database
- Set up CSS



