Models:
User: has_many_routines, has_many products through routines
Routine: belongs to user, has many instructions, has many products
Product - Belongs to routine, has many user through routine

Have a user have a list of products

Tables:

User:
- t.string :username
- t.string :email address
- t.string :password_digest

Routines:
- t.string :name
- t.string :description 
- t.text :products (a collection of products used in the routine) (will try to use erb tags + OL to list out the products in order)
- t.integer :user_id -> (foreign key to associate with user)

Products:
- t.string :name
- t.string :category
- t.integer :routine_id (associates a product to a routine)


Views
- Routines
   - new.erb
   - edit.erb
   - show.erb
   - routines.erb

- Users
   - new_user.erb
   - login.erb
   - show.erb


- A routine belongs to a user
- You can't have a product belong to an instruction unless you want a bunch of duplicate products (this is ok, confirmed with Micah)
- Make the products resuable 
- Routine belongs to user 


- Each user has a routine, each routine has instructions 
- Could make instruction part of the products Tables:
- Routine id, product id, 

- Table InstructionJoin table between Instructions and routines

Join table 
Routine ID, Instruction ID, Step in Routine 
Validate uniqueness of instruction



User Interface
- Want to allow user to sign up/login ('/signup', '/login')
   - By signing up, I'm creating a new user
   - By logging in, I'm creating a new session
- Index Page to welcome user - DONE
- Create user in DB and Model - DONE
- Want to allow user to create new routine / persist routine to database - DONE
- Set up CSS - done

Sessions: What allow us to handle user authentication and authorization - DONE
   - When we enable session + set an appropriate key, we get a hash
   - We can write info into that hash, hash will be persisted via sending cookies to user to live in web browser
   - cookies are secured + encrypted, signed with session secret key -> any info sent to browser is unreadable and unable to be changed


To-do's:

--- do products.all helper method ---

def all_products
   return self.products.all 
end

def current_routine 

end


Priorities 
1. Want user to be able to create new product thru the UI - done, but need to finish #2 as well
2. Want user to be able to add product to existing routine (can do on backend, need to do in PC)
3. 
3. Select product(s) and add to routine
4. Finish blog post

FINISHED TASKS
- Post users routines on index page (may not be able to do this w partial - needs to show routine.name of each routine) - DONE
- User needs to be able to create routine, then be redirect to their index of routines - DONE
- Routine edit action - DONE
- Routine Delete Action - DONE
- products associating with routines - DONE
- ....need to get routine_products to associate with user - DONE
- Routine show View (needs to be an ordered list with clickable link to each product) - DONE
- . Product view index - want user to be able to see the products associated with routines THEY'VE made - DONE
- Want user to be able to click on a product in that index and open its description (show) - DONE
- User routine displays products acssociated with it 


User flow
1. Sign up/login - done
2. User homepage: "Hey user, here are a list of your most recent routines (each routine is clickable)
3. There's a menu up top with "home", "routines", "products"
   - Home is just homepage 
   - Routines is an index of all their routines
   - Products is a repo of products in the database + their descriptions (links are clickable, products can be individually added to a routine)
4. 